1.iris是一个mvc框架，更简单的生成web服务

package main

//导包
import (
	"github.com/kataras/iris"
	)
//定义用户对象
type User struct {
	Username string `json:"username"`//注意变量名大写是为了json可以导出
	Password string `json:"password"`
}

func map_to_json(ctx iris.Context) {
	w:=ctx.ResponseWriter()
	w.Header().Set("Access-Control-Allow-Origin","*")
	ctx.JSON(map[string]string{"username":"username","password":"654321"})
}
//程序入口
func main() {
	app := iris.New()
	//定义url处理器
	app.Handle("GET", "/", func(ctx iris.Context) {
		ctx.HTML("<h1>Welcome</h1>")
	})
	app.Get("/ping", func(ctx iris.Context) {
		ctx.WriteString("pong")
	})
	//返回Json
	app.Get("/getUser", func(ctx iris.Context) {
		w:=ctx.ResponseWriter()
		w.Header().Set("Access-Control-Allow-Origin","*")//跨域允许
		ctx.JSON(User{Username:"admin",Password:"654321"})
	})

	app.Get("/getUser_", map_to_json)
	app.Run(iris.Addr(":80"))
}

2.跨域问题
	(1)同域处理：NGINX代理或者静态资源配置到go webserver里面
	(2)go webserver允许跨域：
	header设置授权，如：w.Header().Set("Access-Control-Allow-Origin","*")//跨域允许	
		
3.总结

http服务流程：监听端口-->客户端连接-->匹配路由-->调用处理器-->生成响应

前后端分离，前端提交url和参数，go服务监听并响应接口。

接口返回的数据在以上demo中是直接写死的，后续接入数据库处理，就可以了。

全过程为：

页面，js或者vue-->url请求-->go，原生http或者iris服务-->路由匹配到处理器-->处理器数据处理-->直接返回或者请求数据库或者请求其他服务


